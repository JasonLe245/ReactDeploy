{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addToInput","setState","state","handleEqual","math","_this2","Input_Input","Button_Button","ClearButton_ClearButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAUaA,iBAAS,SAAAC,GAAK,OAE3BC,EAAAC,EAAAC,cAAA,OACIC,UAAS,kBAAAC,QAVMC,EAYAN,EAAMO,SARbC,SAAmB,MAARF,GAAuB,MAARA,EAQM,WAAP,OAO7BG,QAAU,kBAAMT,EAAMU,YAAYV,EAAMO,YAE9CP,EAAMO,UArBW,IAAAD,ICENK,UAAQ,SAAAX,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMY,SCC/CC,UAAc,SAACb,GAAD,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYK,QAAST,EAAMc,aACrCd,EAAMO,qBCiFAQ,cAjFb,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,KASRuB,WAAa,SAAAjB,GAGXU,EAAKQ,SAAS,CAAEZ,MAAOI,EAAKS,MAAMb,MAAQN,KAbzBU,EAqBnBU,YAAc,WAEZV,EAAKQ,SAAU,CAACZ,MAAOe,OAAUX,EAAKS,MAAMb,UApB5CI,EAAKS,MAAQ,CACXb,MAAO,IAJQI,wEA0BV,IAAAY,EAAAT,KACP,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEbH,EAAAC,EAAAC,cAAC0B,EAAD,CAAOjB,MAAOO,KAAKM,MAAMb,QAEzBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,MAGFtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,MAGFtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,MAGFtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KACAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,KAGAtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAc,kBAAMkB,EAAKF,gBAAjC,KAGAzB,EAAAC,EAAAC,cAAC2B,EAAD,CAAQpB,YAAaS,KAAKI,YAA1B,MAGFtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAajB,YAAa,kBAAMc,EAAKJ,SAAS,CAAEZ,MAAO,OAAvD,mBArEMoB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2db7d71d.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nconst isOperator = val => {\n    \n    //double negative : if it is a number, or any of these,\n    //then we return the boolean (true of false)\n    return !isNaN() || val === \".\" || val === \"=\";\n}\n\nexport const Button = props => (\n\n<div \n    className={`button-wrapper ${\n    \n        isOperator(props.children) ? null : \"operator\"\n    \n    }`}\n        //this means that onClick do something inside\n        //the curly braces {}, and we define the function directly inside\n        //it as well\n        //we were'nt executing it before, now we're executing it\n        onClick={ () => props.handleClick(props.children) }  \n\n>{props.children}</div>\n\n);\n","import React from 'react';\nimport './Input.css';\n\n\n//ES6 syntax, meaning takes in () and exporting ();\nexport const Input = props => <div className=\"input\">{props.input}</div>;\n","import React from 'react';\nimport './ClearButton.css';\n\n//<Button>7</Button> anything you pass between the tags are children\n\n\nexport const ClearButton = (props) => (\n    <div className=\"clear-btn\" onClick={props.handleClear}>\n        {props.children}\n    </div>\n);","import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from './components/Button';\nimport { Input } from './components/Input';\nimport { ClearButton } from './components/ClearButton';\nimport * as math from 'mathjs';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: ''\n    };\n  }\n\n  //ES6 function style. Everytime you click on the row element\n  //you want to execute this function to add to the input vaclue\n  addToInput = val => {\n\n    //input is part of the application's state\n    this.setState({ input: this.state.input + val });\n  };\n\n\n\n  //so when the button is clicked, the handleEqual function will be executed and\n  //then the handleEqual function is called, eval of math object is ran, and input is change\n  //through setState()\n  handleEqual = () => {\n\n    this.setState( {input: math.eval(this.state.input) } )\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n\n        <div className=\"calc-wrapper\">\n\n          <Input input={this.state.input}></Input>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>/</Button>\n          </div> \n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.addToInput}>X</Button>\n          </div> \n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n          </div> \n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={this.addToInput}>0</Button>\n\n            {/* the special equal sign, handleEqual, {} means running inside */}\n            <Button handleClick={ () => this.handleEqual()}>=</Button>\n\n\n            <Button handleClick={this.addToInput}>-</Button>\n          </div> \n\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({ input: \"\" })}>Clear</ClearButton>\n\n          </div>\n\n\n\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}